/*
 * Author: Amarjit Pheiroijam
 * OS : Zorin OS 16 Core
 * Editor : Visual Studio Code 1.64.0
 * Created Date: Tuesday, February 22nd 2022, 11:49:41 pm
 * Year 2022
 */
import React, { useEffect, useState } from 'react';
import LinearProgress from '@mui/material/LinearProgress';
import Introduction from './Pages/Introduction';

const { Configuration, OpenAIApi } = require("openai");
const configuration = new Configuration({
  apiKey: process.env.REACT_APP_OPENAI,
});
const openai = new OpenAIApi(configuration);
const App = () => {
  const [progress, setProgress] = useState(0);
  const [running, setRunning] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  const [gotAnswer, setGotAnswer] = useState(false);
  const [count, setCount] = useState(0);
  useEffect(() => {
  }, [])
  function initialize(){
    setRunning(true);
  }
  function handleSetQuestion(q) {
    setQuestion(q);
  }
  const ask = async () => {
    setProcessing(true);
    setProgress(0);
    //LOADING
    // const timer = setInterval(() => {
    //   setProgress((oldProgress) => {
    //     if (oldProgress === 70) {
    //       return;
    //     }
    //     const diff = Math.random() * 10;
    //     return Math.min(oldProgress + diff, 100);
    //   });
    // }, 300);

    if (count > 5) {
      setRunning(false);
      setProcessing(false);
      return;
    } else {
      var c = count + 1;
      setCount(c);
    }
    console.log("Question : ", question);
    const response = await openai.createCompletion("text-davinci-001", {
      prompt: question,
      temperature: 0.3,
      max_tokens: 150,
      top_p: 1.0,
      frequency_penalty: 0.0,
      presence_penalty: 0.0,
    });
    setAnswer(response.data.choices[0].text);
    console.log("Answer :", response.data.choices[0].text);
    setGotAnswer(true);
    setProgress(100);
    setProcessing(false);

  }
  return (
    <React.Fragment>
      {running ? <Running processing={processing}
        handleSetQuestion={handleSetQuestion}
        ask={ask} answer={answer}
        progress={progress}
        gotAnswer={gotAnswer} /> :
        <Introduction initialize={initialize} />}
    </React.Fragment>
  );
}

const Running = ({ processing, handleSetQuestion, ask, answer, gotAnswer, progress }) => {
  return (
    <div class="m-10 h-screen ">
      <div className="font-black text-5xl">
                Intelligent
        </div>
        <div className='text-black tracking-widest'>
        SEARCH
      </div>

      <p className='text-black m-0 font-normal text-xs mt-2'>
        GPT-3 was trained with large amounts of information from the internet.The quality of the text generated by GPT-3 is so high that it can be difficult to determine whether
        or not it was written by a human, which has both benefits and risks.</p>

      <div className='mt-4 mb-2 font-bold text-xs'>Answer are based on existing knowledge.</div>

      <div className='mt-4 mb-2 font-bold font-medium font-light text-md text-sm'>Please Enter your Question.</div>
      <div><textarea rows="3" name="description" className='bg-gray-200 w-full p-5'
        onChange={(e) => {
          handleSetQuestion(e.target.value);
        }}
        placeholder='What is human life expectancy in the India?'>
      </textarea>

        <div className='text-gray-400 text-xs font-bold mt-1 mb-3'>Only five questions Per Session, Please be mindful !</div>
        {processing ?<LinearProgress variant="determinate" value={progress} color={"inherit"} />:
          <button class="bg-black text-white w-full h-10 mt-3" onClick={ask}>ASK</button>}
        {gotAnswer === true ? <>
          <div className='text-black mt-6 mb-2 font-black text-sm'>GENERATED ANSWER</div>
          <div className='font-bold text-xs'>{answer} </div>
        </> : <></>}
      </div >
    </div>

  );
}
export default App;
